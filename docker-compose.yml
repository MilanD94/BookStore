version: '3.4'

services:
  bookstore.api:
    container_name: bookstore.api
    hostname: bookstore.api
    image: ${DOCKER_REGISTRY-}bookstoreapi
    ports:
      - "8082:8080"
    networks:
      - ww
    build:
      context: .
      dockerfile: BookStore.API/Dockerfile
    depends_on:
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy

  grafana:
    container_name: grafana_grafprom
    image: grafana/grafana:master
    ports:
      - "3000:3000"
    volumes:
        - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
        - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
        prometheus:
            condition: service_healthy
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:3000/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s

  prometheus:
    image: prom/prometheus
    container_name: prometheus_grafprom
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:9090/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s

  bookstore.migrationrunner:
    image: ${DOCKER_REGISTRY-}bookstoremigrationrunner
    networks:
      - ww
    build:
      context: .
      target: final
      dockerfile: BookStore.MigrationRunner/Dockerfile
    depends_on:
      - bookstore.postgresdb

  bookstore.postgresdb:
    networks:
      - ww
    image: "postgres"
    container_name: bookstore.postgresdb

  pgAdmin:
    networks:
      - ww
    image: "dpage/pgadmin4"
    container_name: pgAdmin

networks:
  ww:
volumes:
  local_pgdata:
  pgadmin-data: